# Generated by Django 3.2.14 on 2023-02-21 17:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('DataCenter', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AddressGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Change',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Change_Number', models.CharField(default='CHG Number', help_text='ex. CHG0000000', max_length=30)),
                ('creation_date', models.DateField(auto_now=True)),
                ('created_by', models.CharField(default=' ', max_length=130)),
                ('change_status', models.CharField(choices=[('Not Started', 'Not Started'), ('Complete', 'Complete'), ('Started', 'Started'), ('ERROR', 'ERROR')], default='Not Started', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='device_group_model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_group_name', models.CharField(help_text='Name of device_group', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Duplicates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_name', models.CharField(blank=True, help_text='name of object usually FQDN_IPADDRESS', max_length=200, null=True)),
                ('object_value', models.CharField(blank=True, help_text='name of object usually FQDN_IPADDRESS', max_length=200, null=True)),
                ('object_tag', models.CharField(blank=True, help_text='name of object usually FQDN_IPADDRESS', max_length=200, null=True)),
            ],
            options={
                'verbose_name_plural': 'Dupliactes',
                'ordering': ['-object_name'],
            },
        ),
        migrations.CreateModel(
            name='Firewall',
            fields=[
                ('firewall_Name', models.CharField(help_text='Device Group Name in panorama', max_length=32)),
                ('firewall_Description', models.CharField(blank=True, help_text='Description of Firewall', max_length=140, null=True)),
                ('firewall_ID', models.AutoField(db_column='firewall_ID', help_text='internal Usage', primary_key=True, serialize=False)),
                ('firewall_vsys', models.CharField(blank=True, help_text='vSYS name Case Sensitive!!!!!', max_length=32, null=True)),
                ('firewall_mgt_ip', models.CharField(blank=True, help_text='IP address or Fqdn of Primary FW', max_length=32, null=True)),
            ],
            options={
                'ordering': ['-firewall_ID'],
            },
        ),
        migrations.CreateModel(
            name='Firewall_Interface',
            fields=[
                ('Firewall_Interface_id', models.AutoField(db_column='seczone_id', help_text='internal Usage', primary_key=True, serialize=False)),
                ('Firewall_Interface_name', models.CharField(help_text='Nex: ae2.239 or ethernet 1/1', max_length=32)),
                ('Firewall_Interface_tag', models.CharField(blank=True, help_text='Tag if applicable', max_length=32, null=True)),
                ('Firewall_Interface_description', models.CharField(blank=True, help_text='Description', max_length=140, null=True)),
                ('Firewall_Interface_value', models.CharField(blank=True, help_text='IP address of SUBNET and MASK served from behind the interface ex 10.218.1.`/24', max_length=140, null=True)),
                ('Firewall_Interface_management_profile', models.CharField(blank=True, choices=[('https-ssh-ping-snmp', 'https-ssh-ping-snmp'), ('ping', 'ping')], default='ping', help_text='HAS TO BE [ping or https-ssh-ping-snmp ] default is ping', max_length=32, null=True)),
                ('is_inside_interface', models.BooleanField(blank=True, default=False, help_text='is this the inside of the firewall?', null=True)),
                ('is_RFC_1918', models.BooleanField(blank=True, default=False, help_text='dont set used for any interface special read doc', null=True)),
                ('is_vpn', models.BooleanField(blank=True, default=False, help_text='dont set used for any interface special read doc', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='firewall_template_model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firewall_template_name', models.CharField(help_text='Name of template', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='FirewallRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(default='allow', help_text='action(allow, drop, reset)', max_length=100)),
                ('name_on_the_firewall', models.CharField(blank=True, help_text='name of the rule on the firewall', max_length=200, null=True)),
                ('creation_date', models.DateField(auto_now=True)),
                ('log_at_session_end', models.CharField(blank=True, default='0', help_text='0/1', max_length=2, null=True)),
                ('log_at_session_start', models.CharField(blank=True, default='0', help_text='0/1', max_length=2, null=True)),
                ('log_setting', models.CharField(blank=True, default='any', help_text='users', max_length=100, null=True)),
                ('operation', models.CharField(blank=True, default='allow', help_text='allow/drop/reset', max_length=100, null=True)),
                ('profile_group_name', models.CharField(blank=True, default='ALERT', help_text='profile_group_name', max_length=100, null=True)),
                ('profile_type', models.CharField(default='any', help_text='users', max_length=100)),
                ('start_date', models.DateField(auto_now=True)),
                ('type', models.CharField(blank=True, default='any', help_text='users', max_length=100, null=True)),
                ('isShared', models.BooleanField(blank=True, default=False, help_text='is this a shared policy?', null=True)),
                ('pushed_to_firewall', models.BooleanField(blank=True, default=False, help_text='is it presnet on firewall?', null=True)),
            ],
            options={
                'verbose_name_plural': 'FirewallRules',
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='IKE_VPN',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ike_gateway_name', models.CharField(blank=True, help_text='name of gateway. ex: appian_vpn_test', max_length=100, null=True)),
                ('crypto_profile', models.CharField(blank=True, default='IKE-V2-PROFILE', help_text='name of IKE crypto profile in Pano', max_length=100, null=True)),
                ('ipsec_profile', models.CharField(blank=True, default='IPSEC-PROFILE', help_text='name of IPSEC profile in Panorama', max_length=100, null=True)),
                ('peer_outside_address', models.CharField(blank=True, help_text='IP address of endpoint', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_name', models.CharField(help_text='Name of Location', max_length=80)),
                ('location_description', models.CharField(blank=True, help_text='Description if any', max_length=130, null=True)),
                ('location_networks', models.CharField(blank=True, help_text='CIDR of networks in this location', max_length=3000, null=True)),
                ('location_id', models.AutoField(db_column='location_id', help_text='internal Usage', primary_key=True, serialize=False)),
                ('location_type', models.CharField(choices=[('Parent', 'Parent'), ('Child', 'Child')], default='Parent', help_text='MUST BE PARENT OR CHILD', max_length=32)),
                ('location_classification_type', models.CharField(choices=[('special', 'special'), ('normal', 'normal')], default='normal', help_text='consult manual to use special', max_length=32)),
            ],
            options={
                'ordering': ['-location_name'],
            },
        ),
        migrations.CreateModel(
            name='moveSecurityZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Move Security Zone from VIC to BRM Auto',
            },
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('object_id', models.AutoField(db_column='object_id', help_text='internal Usage', primary_key=True, serialize=False)),
                ('object_name', models.CharField(blank=True, help_text='name of object usually FQDN_IPADDRESS', max_length=200, null=True)),
                ('object_description', models.CharField(blank=True, help_text='description of object', max_length=4000, null=True)),
                ('object_value', models.CharField(blank=True, help_text='ip address, fqdn, groups', max_length=4000, null=True)),
                ('object_tag', models.CharField(blank=True, help_text='Tag', max_length=32, null=True)),
                ('object_type', models.CharField(blank=True, choices=[('ip-netmask', 'ip-netmask'), ('address-group', 'address-group'), ('fqdn', 'fqdn'), ('special', 'special')], default='ip-netmask', help_text='HAS TO BE [ip-netmask, address-group, fqdn, special]', max_length=32, null=True)),
                ('object_location', models.CharField(blank=True, choices=[('FW', 'On a Firewall'), ('INT', 'Internet'), ('CORE', 'Not Behind a Firewall'), ('cloud_place1_supernet', 'cloud_place1_supernet'), ('INT', 'INT'), ('Cloud_Location_Behind_Tunnel10', 'Cloud_Location_Behind_Tunnel10')], help_text='FW,INT,CORE,AWS,Blank if not sure', max_length=32, null=True)),
            ],
            options={
                'ordering': ['-object_name'],
            },
        ),
        migrations.CreateModel(
            name='routingBubble',
            fields=[
                ('routingBubble_id', models.AutoField(primary_key=True, serialize=False)),
                ('routingBubble_name', models.CharField(help_text='Device Group Name in panorama', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='RuleInstance',
            fields=[
                ('ruleinstance_primarykey', models.AutoField(help_text='internal Usage', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='RITM#', max_length=100)),
                ('application', models.TextField(blank=True, help_text='match exactly what panorama shows, comma separated', null=True)),
                ('rule_name', models.CharField(default='CHG', help_text='ex.RITMxxxxx-source-dest-protocol', max_length=100)),
                ('rule_description', models.CharField(default='permits some app', help_text='Rule Description - Max 100 Chars', max_length=300)),
                ('source_user', models.CharField(default='any', help_text='users', max_length=1000)),
                ('urls', models.TextField(blank=True, default='', help_text='URL', null=True)),
                ('creation_date', models.DateField(auto_now=True)),
                ('created_by', models.CharField(default=' ', max_length=130)),
                ('rule_duration', models.CharField(choices=[('5', '5 Days'), ('15', '15 Days'), ('30', '30 Days'), ('60', '60 Days'), ('90', '90 Days'), ('180', '6 Months'), ('0', 'Permanent')], default='0', max_length=10)),
                ('rule_location', models.CharField(choices=[('pre-rulebase', 'pre-rulebase'), ('post-rulebase', 'post-rulebase')], default='pre-rulebase', max_length=20)),
                ('start_date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('catagory_name', models.CharField(blank=True, help_text='Name of the URL cat if different from RITM.ID', max_length=100, null=True)),
                ('schedule_end_date', models.DateTimeField(blank=True, help_text='filled in if there is a schedule set', null=True)),
                ('profile_group_name', models.CharField(blank=True, default='Alert', help_text='profile_group_name', max_length=100)),
                ('isInUse', models.BooleanField(default=False, help_text='is the database working on this')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='SearchandReplace',
            fields=[
                ('id', models.CharField(help_text='RITM#', max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='secZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('security_zone_name', models.CharField(help_text='Name of Security Zone', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('service_protocol', models.CharField(choices=[('TCP', 'TCP'), ('UDP', 'UDP')], default='TCP', max_length=10)),
                ('service_name', models.CharField(help_text='Name of service ex: TCP-DST-443', max_length=140)),
                ('service_description', models.CharField(blank=True, help_text='Description of service - not required', max_length=140, null=True)),
                ('service_id', models.AutoField(db_column='service_id', primary_key=True, serialize=False)),
                ('service_dest_port', models.CharField(help_text='port ex: 443 or 443-445', max_length=140)),
                ('service_type', models.CharField(blank=True, choices=[('service', 'service'), ('service-group', 'service-group')], default='service', help_text='HAS TO BE [service or service-group]', max_length=32, null=True)),
            ],
            options={
                'db_table': 'Services',
                'ordering': ['-service_name'],
            },
        ),
        migrations.CreateModel(
            name='tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(blank=True, help_text='name of object usually FQDN_IPADDRESS', max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VirtualRouter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('virtual_router_name', models.CharField(help_text='VR_Name', max_length=32)),
                ('virtual_router_description', models.CharField(help_text='Description of the VR', max_length=100)),
                ('virtual_router_firewall', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall')),
            ],
        ),
        migrations.CreateModel(
            name='task',
            fields=[
                ('task_status', models.CharField(blank=True, max_length=100, null=True)),
                ('task_search_term', models.CharField(blank=True, max_length=1000, null=True)),
                ('task_id', models.AutoField(help_text='internal Usage', primary_key=True, serialize=False)),
                ('creation_date', models.DateField(auto_now=True)),
                ('job_id', models.CharField(max_length=100)),
                ('task_description', models.CharField(max_length=100)),
                ('myAPIKey', models.CharField(blank=True, max_length=1000, null=True)),
                ('task_results', models.TextField(blank=True, null=True)),
                ('db_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('sub_tasks', models.ManyToManyField(blank=True, help_text='Used for holding sub_tasks', null=True, related_name='_FirewallRules_task_sub_tasks_+', to='FirewallRules.task')),
                ('task_rule_for_firewall', models.ManyToManyField(blank=True, help_text='Used for holding sub_tasks', null=True, related_name='sub_tasks', to='FirewallRules.RuleInstance')),
            ],
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(fields=('tag_name',), name='tag name has to be unique'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_group_members',
            field=models.ManyToManyField(blank=True, help_text='Used for Service-Group Members', null=True, related_name='_FirewallRules_service_service_group_members_+', to='FirewallRules.Service'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_tag',
            field=models.ManyToManyField(blank=True, help_text='tags', null=True, related_name='tags_for_service', to='FirewallRules.tag'),
        ),
        migrations.AddField(
            model_name='seczone',
            name='security_zone_firewall',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall'),
        ),
        migrations.AddField(
            model_name='searchandreplace',
            name='currentServer',
            field=models.ManyToManyField(blank=True, help_text='the server you want to replicate the rules of', null=True, related_name='currentServer', to='FirewallRules.Object'),
        ),
        migrations.AddField(
            model_name='searchandreplace',
            name='newServer',
            field=models.ManyToManyField(blank=True, help_text='the server you want to replicated for', null=True, related_name='newServer', to='FirewallRules.Object'),
        ),
        migrations.AddField(
            model_name='ruleinstance',
            name='db_created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ruleinstance',
            name='dest',
            field=models.ManyToManyField(db_column='object_id', null=True, related_name='dest_address', to='FirewallRules.Object'),
        ),
        migrations.AddField(
            model_name='ruleinstance',
            name='service',
            field=models.ManyToManyField(null=True, to='FirewallRules.Service'),
        ),
        migrations.AddField(
            model_name='ruleinstance',
            name='source',
            field=models.ManyToManyField(db_column='object_id', null=True, related_name='source_address', to='FirewallRules.Object'),
        ),
        migrations.AddField(
            model_name='routingbubble',
            name='routingBubble_firewall',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall'),
        ),
        migrations.AddField(
            model_name='routingbubble',
            name='routingBubble_inside_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall_interface'),
        ),
        migrations.AddField(
            model_name='routingbubble',
            name='routingBubble_virtualrouters',
            field=models.ManyToManyField(to='FirewallRules.VirtualRouter'),
        ),
        migrations.AddField(
            model_name='object',
            name='object_firewall_interface',
            field=models.ForeignKey(blank=True, db_column='object_Firewall_Interface', help_text='If you know, you know', null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall_interface'),
        ),
        migrations.AddField(
            model_name='object',
            name='object_group_members',
            field=models.ManyToManyField(blank=True, help_text='Used for Object-Group Members', null=True, related_name='_FirewallRules_object_object_group_members_+', to='FirewallRules.Object'),
        ),
        migrations.AddField(
            model_name='object',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='used for taging of objects', null=True, related_name='tags', to='FirewallRules.tag'),
        ),
        migrations.AddField(
            model_name='movesecurityzone',
            name='securityZonetoMove',
            field=models.ForeignKey(blank=True, db_column='seczone_fwid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.seczone'),
        ),
        migrations.AddField(
            model_name='location',
            name='location_parents',
            field=models.ManyToManyField(blank=True, help_text='used to add superpath', null=True, related_name='_FirewallRules_location_location_parents_+', to='FirewallRules.Location'),
        ),
        migrations.AddField(
            model_name='location',
            name='location_path',
            field=models.ManyToManyField(blank=True, help_text='Security Zones in Path to here', null=True, to='FirewallRules.secZone'),
        ),
        migrations.AddField(
            model_name='ike_vpn',
            name='tunnel_front_door',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tunnel_source_interface', to='FirewallRules.firewall_interface'),
        ),
        migrations.AddField(
            model_name='ike_vpn',
            name='tunnel_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tunnel_interface', to='FirewallRules.firewall_interface'),
        ),
        migrations.AddField(
            model_name='firewallrules',
            name='destination_zone',
            field=models.ManyToManyField(blank=True, null=True, related_name='firewall_rule_destination_zone', to='FirewallRules.secZone'),
        ),
        migrations.AddField(
            model_name='firewallrules',
            name='devicegroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device_group', to='FirewallRules.firewall'),
        ),
        migrations.AddField(
            model_name='firewallrules',
            name='rule_instance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rule_instance', to='FirewallRules.ruleinstance'),
        ),
        migrations.AddField(
            model_name='firewallrules',
            name='source_zone',
            field=models.ManyToManyField(blank=True, null=True, related_name='firewall_rule_source_zone', to='FirewallRules.secZone'),
        ),
        migrations.AddField(
            model_name='firewallrules',
            name='tags',
            field=models.ManyToManyField(related_name='firewall_rule_tags', to='FirewallRules.tag'),
        ),
        migrations.AddField(
            model_name='firewall_interface',
            name='Firewall_Interface_security_zone',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.seczone'),
        ),
        migrations.AddField(
            model_name='firewall_interface',
            name='Firewall_Interface_virtual_router',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.virtualrouter'),
        ),
        migrations.AddField(
            model_name='firewall_interface',
            name='Firewall_Interface_vlan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='DataCenter.vlan'),
        ),
        migrations.AddField(
            model_name='firewall',
            name='firewall_datacenter',
            field=models.ForeignKey(blank=True, db_column='which DC or location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='DataCenter.datacenter'),
        ),
        migrations.AddField(
            model_name='firewall',
            name='firewall_device_group_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.device_group_model'),
        ),
        migrations.AddField(
            model_name='firewall',
            name='firewall_template_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FirewallRules.firewall_template_model'),
        ),
        migrations.AddField(
            model_name='duplicates',
            name='current_db_value',
            field=models.ForeignKey(db_column='current_db_value', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_db_value', to='FirewallRules.object'),
        ),
        migrations.AddField(
            model_name='change',
            name='Requests',
            field=models.ManyToManyField(to='FirewallRules.RuleInstance'),
        ),
        migrations.AddField(
            model_name='change',
            name='db_created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='addressgroup',
            name='Object_in_DB',
            field=models.ForeignKey(help_text='Used one to one with the object in DB', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='object_in_database', to='FirewallRules.object'),
        ),
        migrations.AddField(
            model_name='addressgroup',
            name='object_group_members',
            field=models.ManyToManyField(blank=True, help_text='Used for Object-Group Members', null=True, related_name='address_group_members', to='FirewallRules.Object'),
        ),
        migrations.AddConstraint(
            model_name='service',
            constraint=models.UniqueConstraint(fields=('service_name',), name='unique name'),
        ),
        migrations.AddConstraint(
            model_name='ruleinstance',
            constraint=models.UniqueConstraint(fields=('id',), name='RuleInstance id has to be unique'),
        ),
        migrations.AddConstraint(
            model_name='object',
            constraint=models.UniqueConstraint(fields=('object_value',), name='unique value'),
        ),
    ]
